// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float4> vertices;

int chunkWidth;
int chunkHeight;
float3 offset;
int precision;

float DistanceFromCenter(float2 a)
{
    float num = 0 - a.x;
    float num2 = 0 - a.y;
    return (float)sqrt(num * num + num2 * num2);
}

float Rand(float2 co) {
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453);
}

float Noise(float2 p) {
    float2 i = floor(p);
    float2 f = frac(p);

    float a = Rand(i);
    float b = Rand(i + float2(1.0, 0.0));
    float c = Rand(i + float2(0.0, 1.0));
    float d = Rand(i + float2(1.0, 1.0));

    float2 u = f * f * (3.0 - 2.0 * f);

    return (lerp(a, b, u.x) +
        (c - a) * u.y * (1.0 - u.x) +
        (d - b) * u.x * u.y);
}


float3 mod289(float3 x)
{
    return x - floor(x / 289.0) * 289.0;
}

float4 mod289(float4 x)
{
    return x - floor(x / 289.0) * 289.0;
}

float4 permute(float4 x)
{
    return mod289((x * 34.0 + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - r * 0.85373472095314;
}

float snoise(float3 v)
{
    const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);

    // First corner
    float3 i  = floor(v + dot(v, C.yyy));
    float3 x0 = v   - i + dot(i, C.xxx);

    // Other corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

    // x1 = x0 - i1  + 1.0 * C.xxx;
    // x2 = x0 - i2  + 2.0 * C.xxx;
    // x3 = x0 - 1.0 + 3.0 * C.xxx;
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy;
    float3 x3 = x0 - 0.5;

    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    float4 p =
      permute(permute(permute(i.z + float4(0.0, i1.z, i2.z, 1.0))
                            + i.y + float4(0.0, i1.y, i2.y, 1.0))
                            + i.x + float4(0.0, i1.x, i2.x, 1.0));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float4 j = p - 49.0 * floor(p / 49.0);  // mod(p,7*7)

    float4 x_ = floor(j / 7.0);
    float4 y_ = floor(j - 7.0 * x_);  // mod(j,N)

    float4 x = (x_ * 2.0 + 0.5) / 7.0 - 1.0;
    float4 y = (y_ * 2.0 + 0.5) / 7.0 - 1.0;

    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

    //float4 s0 = float4(lessThan(b0, 0.0)) * 2.0 - 1.0;
    //float4 s1 = float4(lessThan(b1, 0.0)) * 2.0 - 1.0;
    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, 0.0);

    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    float3 g0 = float3(a0.xy, h.x);
    float3 g1 = float3(a0.zw, h.y);
    float3 g2 = float3(a1.xy, h.z);
    float3 g3 = float3(a1.zw, h.w);

    // Normalise gradients
    float4 norm = taylorInvSqrt(float4(dot(g0, g0), dot(g1, g1), dot(g2, g2), dot(g3, g3)));
    g0 *= norm.x;
    g1 *= norm.y;
    g2 *= norm.z;
    g3 *= norm.w;

    // lerp final noise value
    float4 m = max(0.6 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    m = m * m;

    float4 px = float4(dot(x0, g0), dot(x1, g1), dot(x2, g2), dot(x3, g3));
    return 42.0 * dot(m, px);
}

float fbm(int numLayers, float lacunarity, float persistence, float scale, float3 pos) {
	float noise = 0;
	float frequency = scale / 100;
	float amplitude = 1;

	for (int i = 0; i < numLayers; i ++) {
		float n = 1-abs(snoise(pos * frequency)*2-1);
		//n*=n;
		noise += n * amplitude;

		amplitude *= persistence;
		frequency *= lacunarity;
	}

	return noise;
}

float hash(float2 p) {
    return frac(sin(dot(p, float2(127.1, 311.7))) * 43758.5453123);
}

float noise2(float2 p) {
    float2 i = floor(p);
    float2 f = frac(p);

    float a = hash(i);
    float b = hash(i + float2(1, 0));
    float c = hash(i + float2(0, 1));
    float d = hash(i + float2(1, 1));

    float2 u = f * f * (3.0 - 2.0 * f);
    return lerp(lerp(a, b, u.x), lerp(c, d, u.x), u.y);
}

float fbm2(float2 p, float amplitude, float frequency) {
    float value = 0.0;
    for (int i = 0; i < 5; ++i) {
        value += noise2(p * frequency) * amplitude;
        frequency *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}

float noiseSplitter(float x, float y, float z) {   
    // air 0 or lesser / ground 0 or bigger
    float noise = -1.0;
    float cavesFloorLevel = -(chunkHeight-precision);
    float baseFloorLevel = 0.0;
    float peaksLevel = chunkHeight-precision;

    if(DistanceFromCenter(float2(x,z)) <= 96 && y >= 0.0) {
        if(y < 24.0) {
            return 1.0;
        }
        return -1.0;
    }

    // peaks
    // if(y == peaksLevel) {
    //     return -1.0;
    // }

    // // underground floor
    if(y == cavesFloorLevel) {
        return 1.0;
    }

    // SURFACE
    if(y > baseFloorLevel) {
        float scale = 256.0;
        noise = fbm2(float2(x,z)/scale, 0.3, 1.4); // Mountains & valleys
        // noise += fbm2(float2(x,z)/scale*0.6, 2.0, 1.4) - 0.3; // Mountains & valleys

        return (noise*chunkHeight-8)-y;
    }

    // CAVES
    noise = fbm(3, 3, 0.2, 1, float3(x,z,y));
    return noise;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID) 
{
    if (id.x >= (chunkWidth/precision) || id.y >= (chunkHeight/precision) || id.z >= (chunkWidth/precision)) {
        return;
    }
  
    int idx = id.x*precision;
    int idy = id.y*precision;
    int idz = id.z*precision;
    float noise = 0;
    int index = id.z * chunkHeight/precision * chunkWidth/precision + id.y * chunkWidth/precision + id.x;
    
    noise = noiseSplitter(offset.x+idx, offset.y+idy, offset.z+idz);

    vertices[index] = float4(idx, idy, idz, noise);
}
